settings <- `test_lca-results`$settings
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = settings$analysis_name) +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
summaryplot
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = paste0(settings$analysis_name), ', n = ', settings$frame %>% nrow()) +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
summaryplot
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = paste0(settings$analysis_name), ', n = ', settings$frame %>% nrow()) +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
summaryplot
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = paste0(settings$analysis_name, ', n = ', settings$frame %>% nrow())) +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
summaryplot
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = paste0(settings$analysis_name, ', n = ', settings$frame %>% nrow()),
color = 'model type') +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
summaryplot
summary$replicated
! all(summary$replicated)
summaryplot <- ggplot2::ggplot(summary_long, ggplot2::aes(x = classes, y = value, color = as.factor(modeltype)))+
ggplot2::geom_line() +
ggplot2::labs(title = 'Latent Class Analysis with MPlus 8.4',
subtitle = paste0(settings$analysis_name, ', n = ', settings$frame %>% nrow()),
color = 'model type') +
ggplot2::facet_wrap(~measure,nrow=1) +
ggplot2::scale_x_continuous(limits=c(1, max(summary$classes)), breaks = seq(1,  max(summary$classes), 1))
if(! all(summary$replicated)) {summaryplot + ggplot2::labs(caption = 'ATTENTION: Not all solutions were replicated.')}
summaryplot
if(! all(summary$replicated)) {summaryplot <- summaryplot + ggplot2::labs(caption = 'ATTENTION: Not all solutions were replicated.')}
summaryplot
if(! all(summary$replicated)) {summaryplot <- summaryplot + ggplot2::labs(caption = 'ATTENTION: NOT ALL SOLUTIONS WERE REPLICATED.')}
summaryplot
ggsave(filename=paste0(analysis,"/", analysis,"_summaryplot.PNG"),
plot = summaryplot, device="png",
width = 1600,height = 900,units="px", scale=1.5)
print(mplus_summaryplot)
ggsave(filename=paste0(analysis,"/", analysis,"_summaryplot.PNG"),
plot = summaryplot, device="png",
width = 1000,height = 1000,units="px", scale=1.5)
rm(list=ls())
test()
test()
test()
test()
test()
test()
test()
test()
test()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240911_17-12/test_lca_results.rds")
test_lca_results$plot[[1]]
test_lca_results$plot[[1]] %>% class
model <- test_lca_results$models[[1]]
View(model)
use_r('plot_profiles')
extract_profiles_for_plotting <- function(model, noinflationlabel = 'no\nzero inflation'){
profiles <- extract_profile(model = model)
means <- get_means_from_profiles(profiles)
variances <- get_variances_from_profiles(profiles)
pzero <- get_pzero_from_profiles(profiles)
allparameters <- combine_all_profile_items(means, variances, pzero, noinflationlabel)
profile_ready <- calculate_ypos_for_pzero(allparameters)
profile_ready$item <- variablelookup[profile_ready$item]
profile_ready <-make_class_lables(model, profile_ready)
profile_ready
}
extract_profile<- function(analysis=NA,choice=0, model = NULL){
.make_empty_tibble <- function(){
tibble(param = character(),
item = character(),
est = numeric(),
se = numeric(),
est_se = numeric(),
pval = numeric(),
segment = character(),
level = numeric())
}
if (is.null(model)) {
if(is.na(analysis)){stop('Please provide either a model or analysis path.')}
model<-extract_model(analysis)
if (choice>0) { model<-model[[choice]]} else {choice<-"final"}
}
if(!is.null(model[["parameters"]][["probability.scale"]])){
profile_binary<-model[["parameters"]][["probability.scale"]] %>% as_tibble %>%
rename(item=param,level=category,segment=LatentClass) %>%
mutate(param = NA) %>%
mutate(level=as.integer(level)-1)
}
else {profile_binary  <- .make_empty_tibble()}
if(!is.null(model[["parameters"]][["unstandardized"]])){
profile_metric <- model[["parameters"]][["unstandardized"]] %>% as_tibble %>%
rename(item=param,param=paramHeader, segment=LatentClass) %>%
mutate(level = NA) %>%
filter(param != 'Thresholds') %>%
filter(!str_detect(item, 'CLASS#[0-9]+'))
}
else {profile_metric <- .make_empty_tibble()}
profile <- rbind(profile_metric, profile_binary) %>%
mutate(est_se = as.double(ifelse(str_detect(est_se, '\\*'), NA, est_se))) %>%
mutate(item=tolower(item)) %>%
mutate_at(c("segment","level","item"),as_factor)
praevalenzen<-round((model[["class_counts"]][["modelEstimated"]][["proportion"]]*100),2)
levels(profile$segment)<-paste0("class ",levels(profile$segment)," (",praevalenzen,"%)")
if(!is.na(analysis)){
saveRDS(profile,paste0(analysis,"/",analysis,"_",choice,"_classes_profiles.RDS"))
}
return(profile)
}
make_class_lables <- function(model, profile_ready){
estimated_classcounts <- model$class_counts$modelEstimated %>%
mutate(count = round(count, 2),
proportion = paste0(round(proportion * 100, 2),'%'),
countlabel = paste0('(',count, ', ', proportion, ')')) %>%
select(classnumber = class, countlabel)
profile_ready$classnumber <- as.integer(str_extract(profile_ready$segment, '(?<= )[1-9](?= )'))
profile_ready$classlabel <- interpretation[profile_ready$classnumber]
profile_ready %>% inner_join(estimated_classcounts) %>%
mutate(segment = paste(classlabel, countlabel))
}
get_means_from_profiles <- function(profiles){
profiles %>%
filter(! str_detect(item, '#1')) %>%
filter(str_detect(param, 'Means')) %>%
mutate(est = ifelse(item == 'cgrove', predict(cgrovetransform, newdata = est / 70, inverse = TRUE), est),
est = ifelse(item == 'cspop', est / 3, est),
est = ifelse(item == 'wspop', est / 3, est),
est = ifelse(item == 'wyviews', predict(wyviewstransform, newdata = est / 70, inverse = TRUE), est),
est = ifelse(pval > 0.05 & item == 'widsgnfc', -Inf, est),
est = ifelse(pval > 0.05 & item != 'widsgnfc', 0, est))
}
get_variances_from_profiles <-function(profiles){
profiles %>%
filter(param == 'Variances' | param == 'Dispersion') %>%
mutate(est = ifelse(item == 'cgrove', predict(cgrovetransform, newdata = est / 70, inverse = TRUE), est),
est = ifelse(item == 'cspop', est / 3, est),
est = ifelse(item == 'wspop', est / 3, est),
est = ifelse(item == 'wyviews', predict(wyviewstransform, newdata = est / 70, inverse = TRUE), est),
est = ifelse(pval > 0.05, 0, est),
sd = sqrt(est),
sd = ifelse(sd == 'Inf', 0, sd)) %>%
select(sd, segment, item)
}
get_pzero_from_profiles <- function(profiles){
profiles %>%
filter(str_detect(item, '#1')) %>%
mutate(pzero = exp(est) / (exp(est) +1),
pzero = round(pzero,2),
pzero = paste0('P(y â‰¤ 0)\n= ', pzero),
item = str_remove_all(item, '#1')) %>%
select(-all_of(c('est', 'se', 'est_se', 'pval', 'level')))
}
combine_all_profile_items <- function(means, variances, pzero, noinflationlabel){
suppressMessages(left_join(means, variances)) %>%
mutate(upper = est + sd,
lower = est - sd,
upper = ifelse(item == 'widsgnfc', exp(est) + sqrt(exp(est) + exp(sd**2) * exp(est)**2), upper),
lower = ifelse(item == 'widsgnfc', exp(est) - sqrt(exp(est) + exp(sd**2) * exp(est)**2), lower),
est = ifelse(item == 'widsgnfc', exp(est), est)) %>%
left_join(pzero) %>%
mutate(pzero = ifelse(is.na(pzero), noinflationlabel, pzero))
}
calculate_ypos_for_pzero <- function(allparameters){
upperclass <- allparameters %>%
group_by(item) %>% slice_max(upper, n = 1) %>% ungroup() %>%
select(item, uppermax = upper) %>% right_join(allparameters)
lowerclass <- allparameters %>%
group_by(item) %>% slice_min(lower, n=1) %>% ungroup() %>%
select(item, lowermin = lower) %>% right_join(upperclass)
lowerclass %>%
mutate(paramrange = uppermax - lowermin,
yposinflation = lowermin - 0.3 * paramrange) %>%
select(-lowermin, -uppermax, -paramrange)
}
plot_lca_profiles <- function(profiles, ncol=2, y_lab = 'model estimate'){
nclasses <- profiles$segment %>% levels() %>% length()
ggplot(profiles, aes(x = as.factor(segment), y = est, color = segment))+
facet_wrap(.~item,  scales = "free", ncol = ncol)+
geom_errorbar(aes(ymin = lower, ymax = upper))+
geom_point(size = 2)+
geom_point(aes(alpha = pzero, y = yposinflation), size =20) +
geom_text(aes(y = yposinflation, label = pzero), vjust = 0.2, size = 3, color = 'black')+
scale_color_discrete('')+
guides(alpha = 'none')+
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
guides(color = guide_legend(override.aes = list(size = 5)))+
xlab('') +
ylab(y_lab)
}
extract(model)
extract_profiles_for_plotting(model)
library(tidyverse)
library(tidyverse)
extract_profiles_for_plotting(model)
extract_profiles_for_plotting(model)
extract_profiles_for_plotting <- function(model, noinflationlabel = 'no\nzero inflation'){
profiles <- extract_profile(model = model)
means <- get_means_from_profiles(profiles)
variances <- get_variances_from_profiles(profiles)
pzero <- get_pzero_from_profiles(profiles)
allparameters <- combine_all_profile_items(means, variances, pzero, noinflationlabel)
profile_ready <- calculate_ypos_for_pzero(allparameters)
# profile_ready$item <- variablelookup[profile_ready$item]
# profile_ready <-make_class_lables(model, profile_ready)
profile_ready
}
extract_profiles_for_plotting(model)
getwd()
setwd('..')
setwd('..')
getwd()
saveRDS(model, 'data-raw')
saveRDS(model, 'data-raw/testmodel.rds')
testmodel <- resadRDS('data-raw/testmodel.rds')
testmodel <- readRDS('data-raw/testmodel.rds')
use_data(testdata,
testmodel,
internal = F,
overwrite = T)
use_test('plot_profiles')
View(model)
test_lca_results$settings
saveRDS(test_lca_results, 'data-raw/testresults.rds')
testdata <- readRDS('data-raw/testdata.rds')
testresults <- readRDS('data-raw/testresults.rds')
use_data(testdata,
internal = F,
overwrite = T)
use_data(testresults,
internal = T,
overwrite = T)
use_r('create_templates')
document()
document()
load_all()
rm(list=ls())
testresults
testresults$models[[2]]
model <- testresults$models[[2]]
View(model)
model <- testresults$models[[2]][[2]]
View(model)
View(model)
extract_profile<- function(model){
.make_empty_tibble <- function(){
tibble(param = character(),
item = character(),
est = numeric(),
se = numeric(),
est_se = numeric(),
pval = numeric(),
segment = character(),
level = numeric())
}
if(!is.null(model[["parameters"]][["probability.scale"]])){
profile_binary<-model[["parameters"]][["probability.scale"]] %>% as.data.frame() %>%
dplyr::rename(item=param,level=category,segment=LatentClass) %>%
dplyr::mutate(param = NA) %>%
dplyr::mutate(level=as.integer(level)-1)
}
else {profile_binary  <- .make_empty_tibble()}
if(!is.null(model[["parameters"]][["unstandardized"]])){
profile_metric <- model[["parameters"]][["unstandardized"]] %>% ad.data.frame() %>%
dplyr::rename(item=param,param=paramHeader, segment=LatentClass) %>%
dplyar::mutate(level = NA) %>%
dplyr::filter(param != 'Thresholds') %>%
dplyr::filter(!str_detect(item, 'CLASS#[0-9]+'))
}
else {profile_metric <- .make_empty_tibble()}
profile <- rbind(profile_metric, profile_binary) %>%
dplyr::mutate(est_se = as.double(ifelse(str_detect(est_se, '\\*'), NA, est_se))) %>%
dplyr::mutate(item=tolower(item)) %>%
dplyr::mutate_at(c("segment","level","item"),as_factor)
prevalences <- round((model[["class_counts"]][["modelEstimated"]][["proportion"]]*100),2)
levels(profile$segment)<-paste0("class ",levels(profile$segment)," (",prevalences,"%)")
return(profile)
}
model <- testresults$models[[2]][[2]]
extract_profile(model)
extract_profile(model)
extract_profile<- function(model){
.make_empty_tibble <- function(){
tibble(param = character(),
item = character(),
est = numeric(),
se = numeric(),
est_se = numeric(),
pval = numeric(),
segment = character(),
level = numeric())
}
if(!is.null(model[["parameters"]][["probability.scale"]])){
profile_binary<-model[["parameters"]][["probability.scale"]] %>% as.data.frame() %>%
dplyr::rename(item=param,level=category,segment=LatentClass) %>%
dplyr::mutate(param = NA) %>%
dplyr::mutate(level=as.integer(level)-1)
}
else {profile_binary  <- .make_empty_tibble()}
if(!is.null(model[["parameters"]][["unstandardized"]])){
profile_metric <- model[["parameters"]][["unstandardized"]] %>% ad.data.frame() %>%
dplyr::rename(item=param,param=paramHeader, segment=LatentClass) %>%
dplyr::mutate(level = NA) %>%
dplyr::filter(param != 'Thresholds') %>%
dplyr::filter(!str_detect(item, 'CLASS#[0-9]+'))
}
else {profile_metric <- .make_empty_tibble()}
profile <- rbind(profile_metric, profile_binary) %>%
dplyr::mutate(est_se = as.double(ifelse(str_detect(est_se, '\\*'), NA, est_se))) %>%
dplyr::mutate(item=tolower(item)) %>%
dplyr::mutate_at(c("segment","level","item"),as_factor)
prevalences <- round((model[["class_counts"]][["modelEstimated"]][["proportion"]]*100),2)
levels(profile$segment)<-paste0("class ",levels(profile$segment)," (",prevalences,"%)")
return(profile)
}
extract_profile(model)
extract_profile<- function(model){
.make_empty_tibble <- function(){
tibble(param = character(),
item = character(),
est = numeric(),
se = numeric(),
est_se = numeric(),
pval = numeric(),
segment = character(),
level = numeric())
}
if(!is.null(model[["parameters"]][["probability.scale"]])){
profile_binary<-model[["parameters"]][["probability.scale"]] %>% as.data.frame() %>%
dplyr::rename(item=param,level=category,segment=LatentClass) %>%
dplyr::mutate(param = NA) %>%
dplyr::mutate(level=as.integer(level)-1)
}
else {profile_binary  <- .make_empty_tibble()}
if(!is.null(model[["parameters"]][["unstandardized"]])){
profile_metric <- model[["parameters"]][["unstandardized"]] %>% as.data.frame() %>%
dplyr::rename(item=param,param=paramHeader, segment=LatentClass) %>%
dplyr::mutate(level = NA) %>%
dplyr::filter(param != 'Thresholds') %>%
dplyr::filter(!str_detect(item, 'CLASS#[0-9]+'))
}
else {profile_metric <- .make_empty_tibble()}
profile <- rbind(profile_metric, profile_binary) %>%
dplyr::mutate(est_se = as.double(ifelse(str_detect(est_se, '\\*'), NA, est_se))) %>%
dplyr::mutate(item=tolower(item)) %>%
dplyr::mutate_at(c("segment","level","item"),as_factor)
prevalences <- round((model[["class_counts"]][["modelEstimated"]][["proportion"]]*100),2)
levels(profile$segment)<-paste0("class ",levels(profile$segment)," (",prevalences,"%)")
return(profile)
}
extract_profile(model)
test_active_file()
test_active_file()
test_active_file()
model
extract_profiles_for_plotting <- function(model, noinflationlabel = 'no\nzero inflation'){
profiles <- extract_profile(model = model)
means <- get_means_from_profiles(profiles)
variances <- get_variances_from_profiles(profiles)
pzero <- get_pzero_from_profiles(profiles)
allparameters <- combine_all_profile_items(means, variances, pzero, noinflationlabel)
profile_ready <- calculate_ypos_for_pzero(allparameters)
profile_ready <-make_class_lables(model, profile_ready)
profile_ready
}
extract_profile<- function(model){
.make_empty_tibble <- function(){
tibble(param = character(),
item = character(),
est = numeric(),
se = numeric(),
est_se = numeric(),
pval = numeric(),
segment = character(),
level = numeric())
}
if(!is.null(model[["parameters"]][["probability.scale"]])){
profile_binary<-model[["parameters"]][["probability.scale"]] %>% as.data.frame() %>%
dplyr::rename(item=param,level=category,segment=LatentClass) %>%
dplyr::mutate(param = 'probability') %>%
dplyr::mutate(level=as.integer(level)-1)
}
else {profile_binary  <- .make_empty_tibble()}
if(!is.null(model[["parameters"]][["unstandardized"]])){
profile_metric <- model[["parameters"]][["unstandardized"]] %>% as.data.frame() %>%
dplyr::rename(item=param,param=paramHeader, segment=LatentClass) %>%
dplyr::mutate(level = NA) %>%
dplyr::filter(param != 'Thresholds') %>%
dplyr::filter(!str_detect(item, 'CLASS#[0-9]+'))
}
else {profile_metric <- .make_empty_tibble()}
profile <- rbind(profile_metric, profile_binary) %>%
dplyr::mutate(est_se = as.double(ifelse(str_detect(est_se, '\\*'), NA, est_se))) %>%
dplyr::mutate(item=tolower(item)) %>%
dplyr::mutate_at(c("segment","level","item"),as_factor)
prevalences <- round((model[["class_counts"]][["modelEstimated"]][["proportion"]]*100),2)
levels(profile$segment) <- paste0("class ",levels(profile$segment)," (",prevalences,"%)")
return(profile)
}
get_means_from_profiles <- function(profiles){
profiles %>%
dplyr::filter(! str_detect(item, '#1')) %>%
dplyr::filter(str_detect(param, 'Means'))
}
get_variances_from_profiles <-function(profiles){
profiles %>%
dplyr::filter(param == 'Variances' | param == 'Dispersion') %>%
dplyr::mutate(est = ifelse(pval > 0.05, 0, est),
sd = sqrt(est),
sd = ifelse(sd == 'Inf', 0, sd)) %>%
dplyr::select(sd, segment, item)
}
get_pzero_from_profiles <- function(profiles){
profiles %>%
dplyr::filter(str_detect(item, '#1')) %>%
dplyr::mutate(pzero = exp(est) / (exp(est) +1),
pzero = round(pzero,2),
pzero = paste0('P(y â‰¤ 0)\n= ', pzero),
item = stringr::str_remove_all(item, '#1')) %>%
dplyr::select(-dplyr::all_of(c('est', 'se', 'est_se', 'pval', 'level')))
}
combine_all_profile_items <- function(means, variances, pzero, noinflationlabel){
suppressMessages(dplyr::left_join(means, variances)) %>%
dplyr::mutate(upper = est + sd,
lower = est - sd,
upper = ifelse(item == 'widsgnfc', exp(est) + sqrt(exp(est) + exp(sd**2) * exp(est)**2), upper),
lower = ifelse(item == 'widsgnfc', exp(est) - sqrt(exp(est) + exp(sd**2) * exp(est)**2), lower),
est = ifelse(item == 'widsgnfc', exp(est), est)) %>%
dplyr::left_join(pzero) %>%
dplyr::mutate(pzero = ifelse(is.na(pzero), noinflationlabel, pzero))
}
calculate_ypos_for_pzero <- function(allparameters){
upperclass <- allparameters %>%
dplyr::group_by(item) %>% dplyr::slice_max(upper, n = 1) %>% dplyr::ungroup() %>%
dplyr::select(item, uppermax = upper) %>% dplyr::right_join(allparameters)
lowerclass <- allparameters %>%
dplyr::group_by(item) %>% dplyr::slice_min(lower, n=1) %>% dplyr::ungroup() %>%
dplyr::select(item, lowermin = lower) %>% dplyr::right_join(upperclass)
lowerclass %>%
dplyr::mutate(paramrange = uppermax - lowermin,
yposinflation = lowermin - 0.3 * paramrange) %>%
dplyr::select(-lowermin, -uppermax, -paramrange)
}
make_class_lables <- function(model, profile_ready){
estimated_classcounts <- model$class_counts$modelEstimated %>%
dplyr::mutate(count = round(count, 2),
proportion = paste0(round(proportion * 100, 2),'%'),
countlabel = paste0('(',count, ', ', proportion, ')')) %>%
dplyr::select(classnumber = class, countlabel)
profile_ready$classnumber <- as.integer(str_extract(profile_ready$segment, '(?<= )[1-9](?= )'))
profile_ready$classlabel <- interpretation[profile_ready$classnumber]
profile_ready %>% dplyr::inner_join(estimated_classcounts) %>%
dplyr::mutate(segment = paste(classlabel, countlabel))
}
plot_lca_profiles <- function(profiles, ncol=2, y_lab = 'model estimate'){
nclasses <- profiles$segment %>% levels() %>% length()
ggplot2::ggplot(profiles, aes(x = as.factor(segment), y = est, color = segment))+
ggplot2::facet_wrap(.~item,  scales = "free", ncol = ncol)+
ggplot2::geom_errorbar(aes(ymin = lower, ymax = upper))+
ggplot2::geom_point(size = 2)+
ggplot2::geom_point(aes(alpha = pzero, y = yposinflation), size =20) +
ggplot2::geom_text(aes(y = yposinflation, label = pzero), vjust = 0.2, size = 3, color = 'black')+
ggplot2::scale_color_discrete('')+
ggplot2::guides(alpha = 'none')+
ggplot2::theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
ggplot2::guides(color = guide_legend(override.aes = list(size = 5)))+
ggplot2::xlab('') +
ggplot2::ylab(y_lab)
}
extract_profiles_for_plotting(model)
erg <- extract_profiles_for_plotting(model)
extract_profiles_for_plotting <- function(model, noinflationlabel = 'no\nzero inflation'){
profiles <- extract_profile(model = model)
means <- get_means_from_profiles(profiles)
variances <- get_variances_from_profiles(profiles)
pzero <- get_pzero_from_profiles(profiles)
allparameters <- combine_all_profile_items(means, variances, pzero, noinflationlabel)
profile_ready <- calculate_ypos_for_pzero(allparameters)
# profile_ready <-make_class_lables(model, profile_ready)
profile_ready
}
erg <- extract_profiles_for_plotting(model)
View(erg)
erg <- extract_profile()mdoel
erg <- extract_profile(model)
View(erg)
View(erg)
erg <- extract_profiles_for_plotting(model)
View(erg)
glimpse(erg)
test_active_file()
test_active_file()
