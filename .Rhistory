testdata
colnames(testdata)
testdata <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/data-raw/testdata.rds")
colnames(testdata)
load_all()
rm(list=ls())
load_all()
colnames(testdata)
view(testdata)
dyplyr::view(testdata)
dplyr::view(testdata)
dplyr::Ciew(testdata)
dplyr::View(testdata)
tidyverse::view(testdata)
utils::view(testdata)
test <- testdata
View(test)
dplyr::glimpse(test)
test_active_file()
use_r('define_lca')
load_all()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
document()
test_active_file()
test_active_file()
rm(list=ls())
test()
test()
test()
test()
test()
test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test <- define_lca(testdata, 'test', 'id')
test
test$auxvariables
test$use
use_test('define_lca')
test_active_file()
test_active_file()
use_r('define_lca')
use_r('define_lca')
test_active_file()
load_all()
test_active_file()
test_active_file()
settings <- define_lca(testdata, 'test', 'id')
View(settings)
all(settings$use == settings$auxvariables)
settings$use == settings$auxvariables
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test()
check()
library(devtools)
testdata <- readRDS('data-raw/testdata.rds')
# basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
#                             readLines('data-raw/base_lca_model2_template.txt'),
#                             readLines('data-raw/base_lca_model3_template.txt'),
#                             readLines('data-raw/base_lca_model4_template.txt'),
#                             readLines('data-raw/base_lca_model5_template.txt'),
#                             readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
internal = F,
overwrite = T)
check()
use_r('define_lca')
document()
check()
use_mit_license()
test()
test()
load_all()
load_all()
load_all()
test()
test()
test()
use_r('define_lca')
document()
test()
use_r('create_models')
use_test('create_models')
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
settings <- define_lca(testdata, 'test', 'id', use = c('var1', 'var2', 'var3', 'var4'),
censored_above = 'var1', censored_below = 'var2', poisson = 'var3', negbin = 'var4')
View(settings)
settings <- define_lca(testdata, 'test', 'id', use = c('var1', 'var2', 'var3'))
View(settings)
correlation_block <- combn(settings$correlate, 2, function(x) paste0(x[1], ' WITH ', x[2], ';'))
class(correlation_block)
as.character(correlation_block)
as.character(correlation_block)
test()
uses_test('define_lca')
use_test('define_lca')
use_r('define_lca')
test()
test()
test()
test()
test()
test()
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'),
censored_above = c('var1', 'var2'), inflated = c('var1', 'var2'))
settings$inflation_block <- create_inflation_block(settings)
View(settings)
model1 <- create_model1(settings)
test()
test()
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'), categorical = c('var1'))
settings$inflation_block <- create_inflation_block(settings)
View(settings)
length(settings$inflation_block)
create_model1(settings)
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'), categorical = c('var1'))
settings$inflation_block <- create_inflation_block(settings)
expect_equal(create_model1(settings), character())
rm(list=ls())
test()
test()
use_r('define_lca')
use_test('define_lca')
test_active_file()
test()
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'), categorical = c('var1', 'var2'))
settings$inflation_block <- create_inflation_block(settings)
settings$freevariance_block <- create_freevariance_block(settings)
expect_equal(create_model2(settings), character())
create_model2(settings)
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'), categorical = 'var1',
poisson = 'var2', inflated = 'var2')
settings$inflation_block <- create_inflation_block(settings)
settings$freevariance_block <- create_freevariance_block(settings)
model2 <- c('MODEL:',
'%CLASS1%',
'[ var2#1 ];',
'[[classes > 1]]',
'%CLASS2%',
'[ var2#1 ];',
'[[/classes > 1]]',
'[[classes > 2]]',
'%CLASS3%',
'[ var2#1 ];',
'[[/classes > 2]]')
create_model2(settings)
test()
test()
test()
test/
test()
test()
test()
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'),
censored_above = c('var1', 'var2'), inflated = 'var2')
settings$inflation_block <- create_inflation_block(settings)
settings$correlation_block <- create_correlation_block(settings)
create_model3(settings)
View(settings)
model3 <- c('MODEL:',
'%OVERALL%',
settings$correlation_block)
test()
test()
test()
test()
settings <- define_lca(testdata, 'test', 'id', nclasses = 3, use = c('var1', 'var2'), categorical = c('var1', 'var2'))
settings$inflation_block <- create_inflation_block(settings)
settings$correlation_block <- create_correlation_block(settings)
settings$freevariance_block <- create_freevariance_block(settings)
View(settings)
test()
View(settings)
length(settings$inflation_block) == 0 && length(settings$correlation_block) && length(settings$freevariance_block) == 0
test()
test()
combn(c('a'), 2, function(x) paste0(x[1], ' WITH ', x[2], ';')
)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test*
test*
test()
test()
test()
test()
test()
test()
test()
use_r('R/create_templates.R')
use_r('creat_templates')
use_test('create_analysis')
test()
test()
create_analysis(settings)
test <- create_analysis(settings)
view(test)
View(test)
test()
test()
test()
list(c('a','b'), c('c','d'))
?expected_equal
?expect_equal
create_analysis(settings)
analysis_all_types <- c('ANALYSIS:',
'TYPE = MIXTURE;',
'PROCESSORS = 64;',
'[[classes = 1]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 1]]',
'[[classes = 2]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 2]]',
'[[classes = 3]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 3]]',
'[[classes = 4]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 4]]',
'[[classes = 5]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 5]]',
'[[classes = 6]]',
'STITERATIONS = 32;',
'STARTS = 160 32;',
'[[/classes = 6]]')
create_analysis(settings)[1]
analysis_all_types
test()
test()
test()
?define_lca
test()
load_all()
document()
settings <- define_lca(testdata, 'test', 'id')
create_templates(settings)
create_templates(settings)
load_all()
create_templates(settings)
settings <- define_lca(testdata, 'test', 'id', censored_above = 'var1', censored_below = c('var3', 'var7'), poisson = 'var6', inflated = 'var1')
create_templates(settings)
settings <- define_lca(testdata, 'test', 'id', censored_above = 'var1', censored_below = c('var3', 'var7'), poisson = 'var6', inflated = 'var1', nclasses = 10)
create_templates(settings)
test()
test()
test()
test()
settings <- define_lca(testdata, 'test', 'id', censored_above = 'var1', censored_below = c('var3', 'var7'), poisson = 'var6', inflated = 'var1', nclasses = 10, lmrlrt = T)
create_templates(settings)
library(devtools)
use_r('perform_lca')
use_test('perform_lca')
load_all()
test()
test8)
test()
ggplot(testdata)
ggplot2::ggplot(testdata)
ggplot2::ggplot(testdata) %>% class
obj <- ggplot2::ggplot(testdata) %>% class
class(obj)
trype(obj)
typeof(obj)
obj <- ggplot2::ggplot(testdata)
class(obj)
typeof(obj)
View(obj)
test()
test()
test()
use_package('MplusAutomation')
perform_lca <- function(settings){
create_templates(settings)
results <- list()
results$settings <- settings
class(results) <- 'easylca'
results
}
define_lca(testdatat, 'test', 'id')
define_lca(testdata, 'test', 'id')
settings <- define_lca(testdata, 'test', 'id')
perform_lca(settings)
perform_lca(settings)
load_all
load_all()
perform_lca(settings)
for(i in seq(1)){print(i)}
perform_lca <- function(settings){
create_templates(settings)
results <- list()
results$settings <- settings
models <- list()
for(i in seq(1)){
model <- mplus_lca(settings, model = i)
models <- c(models, model)
}
class(results) <- 'easylca'
results
}
mplus_lca <- function(settings, modeltype){
setwd(settings$folder_name)
analysis <- paste0(settings$analysis_name, '_model', modeltype)
typefolder <- paste0('model ', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
MPlusAutomation::prepareMplusData(dataset,paste0(typefolder,"/",analysis,".dat"))
MPlusAutomation::createModels(paste0(typefolder,"/",analysis,"_template.txt"))
MPlusAutomation::runModels(analysis,logFile=paste0(typefolder,"/", analysis,"_log.txt"),showOutput=F,quiet=F)
mplus_results<- MPlusAutomation::readModels(analysis,recursive=T)
saveRDS(mplus_results,paste0(analysis,"/",analysis,".RDS"))
return(mplus_results)
}
perform_lca(settings)
library(MplusAutomation)
perform_lca(settings)
setwd('..')
getwd
getwd()
setwd('easylca')
getwd()
mplus_lca <- function(settings, modeltype){
setwd(settings$folder_name)
analysis <- paste0(settings$analysis_name, '_model', modeltype)
typefolder <- paste0('model ', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
MplusAutomation::prepareMplusData(dataset,paste0(typefolder,"/",analysis,".dat"))
MplusAutomation::createModels(paste0(typefolder,"/",analysis,"_template.txt"))
MplusAutomation::runModels(analysis,logFile=paste0(typefolder,"/", analysis,"_log.txt"),showOutput=F,quiet=F)
mplus_results<- MplusAutomation::readModels(analysis,recursive=T)
saveRDS(mplus_results,paste0(analysis,"/",analysis,".RDS"))
setwd('..')
return(mplus_results)
}
perform_lca(settings)
mplus_lca <- function(settings, modeltype){
setwd(settings$folder_name)
analysis <- paste0(settings$analysis_name, '_model', modeltype)
typefolder <- paste0('model ', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
MplusAutomation::prepareMplusData(settings$frame,paste0(typefolder,"/",analysis,".dat"))
MplusAutomation::createModels(paste0(typefolder,"/",analysis,"_template.txt"))
MplusAutomation::runModels(analysis,logFile=paste0(typefolder,"/", analysis,"_log.txt"),showOutput=F,quiet=F)
mplus_results<- MplusAutomation::readModels(analysis,recursive=T)
saveRDS(mplus_results,paste0(analysis,"/",analysis,".RDS"))
setwd('..')
return(mplus_results)
}
perform_lca(settings)
perform_lca(settings)
use_test('create_templates')
test()
use_r('create_templates')
test()
test_active_file()
setwd(settings$folder_name)
getwd()
analysis <- paste0(settings$analysis_name, '_model', modeltype)
modeltype <- 1
analysis <- paste0(settings$analysis_name, '_model', modeltype)
typefolder <- paste0('model ', modeltype)
typefolder <- paste0('model', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
MplusAutomation::prepareMplusData(settings$frame,paste0(typefolder,"/",analysis,".dat"))
MplusAutomation::createModels(paste0(typefolder,"/",analysis,"_template.txt"))
define_lca(testdata, 'test', 'id')
settings <- define_lca(testdata, 'test', 'id')
setwd('..')
create_templates(settings)
setwd(settings$folder_name)
analysis <- paste0(settings$analysis_name, '_model', modeltype)
typefolder <- paste0('model', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
MplusAutomation::prepareMplusData(settings$frame,paste0(typefolder,"/",analysis,".dat"))
MplusAutomation::createModels(paste0(typefolder,"/",analysis,"_template.txt"))
analysis <- paste0(settings$analysis_name, '_model', modeltype)
if (!dir.exists(typefolder)) {dir.create(typefolder)}
list.files(typefolder,include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(typefolder,"/"))
rm(typefolder)
setwd(settings$folder_name)
analysis <- paste0(settings$analysis_name, '_model', modeltype)
if (!dir.exists(typefolder)) {dir.create(paste0(analysis, '_lca'))}
if (!dir.exists(paste0(analysis, '_lca'))) {dir.create(paste0(analysis, '_lca'))}
list.files(paste0(analysis, '_lca'),include.dirs = F, full.names = T) %>% file.remove
file.copy(paste0(analysis,"_template.txt"),paste0(analysis,"_lca/"))
MplusAutomation::prepareMplusData(settings$frame,paste0(analysis,"_lca/",analysis,".dat"))
MplusAutomation::createModels(paste0(analysis,"_lca/",analysis,"_template.txt"))
MplusAutomation::runModels(analysis,logFile=paste0(analysis,"_lca/", analysis,"_log.txt"),showOutput=F,quiet=F)
?MplusAutomation::runModels()
MplusAutomation::runModels(paste0(analysis, '_lca'),logFile=paste0(analysis,"_lca/", analysis,"_log.txt"),showOutput=F,quiet=F)
test()
use_r('create_templates')
rm(list=ls())
use_test('perform_lca')
test()
test()
use_test('create_templates')
use_r('create_templates')
test()
use_test('perform_lca')
?setwd
setwd('..')
getwd()
setwd('easylca/')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_model1 <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240911_09-32/test_model1_lca/test_model1.rds")
View(test_model1)
class(test_model1, 'mplus.model.list')
class(test_model)
class(test_model1)
test_active_file()
rm(test_model1)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_test('create_templates')
use_test('create_models')
use_r('create_models')
use_test('create_models')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
`test_20240911_10-26lca_results` <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240911_10-26lca_results.rds")
View(`test_20240911_10-26lca_results`)
test_active_file()
`test_lca-results` <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240911_10-33/test_lca-results.rds")
View(`test_lca-results`)
testdtaa
testdata
testdata$var4 %>% hist()
testdata$var8 %>% hist()
testdata$var7 %>% hist()
testdata$var3 %>% hist()
testdata$var4 %>% hist()
testdata$var5 %>% hist()
testdata$var6 %>% hist()
test_active_file()
use_r('define_lca')
test_active_file()
`test_lca-results` <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240911_10-40/test_lca-results.rds")
View(`test_lca-results`)
