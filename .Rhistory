suppressWarnings(3 + 4)
test()
test_active_file()
settings <- define_lca(testdata_weights, 'test', 'id',
weight_variable = 'weights')
library(devtools)
load_all()
settings <- define_lca(testdata_weights, 'test', 'id',
weight_variable = 'weights', nclasses = 2)
perform_lca(settings, 2)
use_r('plot_profiles')
use_r('create_all_figures')
use_r('perform_lca')
load_all()
perform_lca(settings, 2)
load_all()
perform_lca(settings, 2)
test <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/test_20240920_15-52/test_lca_results.rds")
show_summary(test)
show_model(test, 2, 2)
use_r('perform_lca')
use_r('rerun_lca')
use_r('show_summary')
use_r('show_model')
use_r('get_prediction_for_model')
document()
rm(list=ls())
testresults
show_summary(testresults)
settings <- define_lca(testdata, 'test', 'id', nclasses = 2, starts = 10)
lca <- perform_lca(settings)
lca <- perform_lca(settings, modeltypes = c(2, 4))
show_summary(lca)
load_all()
load_all()
rerun_model(lca)
lca_ <- rerun_lca(lca, recursive = T)
names(testresults$models)
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
rlang::last_trace()
View(lca)
names(testresults$models)
names(testresults$models) %>% stringr::str_extract([0-9])
as.integer(gsub("[^0-9]", "", names(lca$models)))
load_all()
lca_ <- rerun_lca(lca, recursive = T)
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
View(lca_)
use_r('perform_lca')
?file.copy
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
perform_lca(settings, modeltypes = c(2,4))
setwd("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca")
lca <- perform_lca(settings, modeltypes = c(2,4))
lca_ <- rerun_lca(lca)
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
easylca <- lca
(! any(easylca$summary$replicated) | any(is.na(easylca$summary$Parameters)
)
)
! any(easylca$summary$replicated)
! all(easylca$summary$replicated)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
load_all()
lca_ <- rerun_lca(lca, recursive = T)
library(devtools)
library()
library(devtools)
set <- define_lca(testdata, 'test', 'id', starts=20, nclasses =2)
load_all()
set <- define_lca(testdata, 'test', 'id', starts=20, nclasses =2)
lca <- perform_lca(lca, modeltypes = 2)
lca <- perform_lca(set, modeltypes = 2)
lca_ <- rerun_lca(lca, recursive = T)
show_summary(lca_)
show_model(lca_, 2, 2)
set <- define_lca(testdata, 'test', 'id', starts=20, nclasses =2)
lca <- perform_lca(set, modeltypes = c(2, 4))
lca_ <- rerun_lca(lca, recursive = T)
show_model(4, 2)
show_model(lca_, 4, 2)
rm(list=ls())
?rerun_lca
document()
?rerun_lca
document()
use_test('perform_lca')
test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
devtools::install()
devtools::install()
install()
devtools::install()
devtools::install()
load_all()
library(devtools)
load_all()
library(devtools)
load_all()
install()
pca_firstcomponent_woutlang_model1 <- readRDS("N:/Materialien/Promotion/202411 Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/pca_firstcomponent_woutlang_20241028_09-12/pca_firstcomponent_woutlang_model1_lca/pca_firstcomponent_woutlang_model1.rds")
model <- pca_firstcomponent_woutlang_model1[[1]]
plot_kruskal_profiles(model)
library(devtools)
load_all()
plot_kruskal_profiles(model)
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[2]])
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[3]])
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[4]])
model <- pca_firstcomponent_woutlang_model1[[""]]
model <- pca_firstcomponent_woutlang_model1[[2]]
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
chisquares <- .get_kruskal_chisquares()
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
chisquares <- .get_kruskal_chisquares()
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1'))
items
model$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]]$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]]$input$variable$usevariables %>% stringr::str_split_1(' ')
model_1 <- pca_firstcomponent_woutlang_model1[[1]]
model_2 <- model
model <- model_1
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
lca_data_pcaselection_firstcomponent <- readRDS("N:/Materialien/Promotion/202411 Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/data/4_folds/lca_data_pcaselection_firstcomponent.rds")
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items
items %>% stringr::str_subset('', negate = T)
items[item != '']
items[items != '']
items[items != ''] %>% length
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
plot_kruskal_profiles(model)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
model <- model_2
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1'))
item <- 'scnrock'
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
View(predicted)
predicted[[toupper(item)]]
predicted[[toupper(item)]] %>% length()
predicted[['CLASS']]
View(model_1)
View(model_2)
install()
load_all()
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
predicted[['CLASS']]
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] == 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
print(are_all_in_same_class)
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] == 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
print(are_all_in_same_class)
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] <- 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
load_all()
model_2$summaries$Title
loac
load_all()
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning(paste0('CLASS PREDICTIONS FOR ',
model$summaries$Title
,' WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.'))
predicted[['CLASS']] <- 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
install()
rm(list=ls())
remove.packages('easylca')
install_github('markusradke/easylca')
sprintf("%02d", 1)
sprintf("%02d", 12)
sprintf("%02d", 9)
library(devtools)
load_all8
load_all()
test_active_file()
use_test()
use_r('create_templates')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_r('perform_lca')
use_test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
?MplusAutomation::createModels(
?MplusAutomation::createModels
vignette("Vignette", package="MplusAutomation")
toString(c('a', 'b', 'c'))
paste(c('a', 'b', 'c'), collapse = "")
paste(c('a', 'b', 'c'), collapse = " ")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_lca_results <- readRDS("N:/Materialien/R_packages/easylca/tests/testthat/test_20241029_15-08/test_lca_results.rds")
View(test_lca_results)
View(test_lca_results[["summary"]])
View(test_lca_results)
rm(list=ls())
gc(
)
gc()
