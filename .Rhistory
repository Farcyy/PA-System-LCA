library(devtools)
use_pipe()
use_testthat()
lca <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/data-raw/lca.rds")
sample(lca)
sample(lca, 1000)
testdata <- lca[sample(seq(nrow(lca), 1000)),]
testdata <- lca[sample(seq(nrow(lca),size = 1000),]
testdata <- lca[sample(seq(nrow(lca)),size = 1000),]
dplyr::glimpse(testdata)
testdata$wage %>% hist
library(tidyverse)
testdata$wage %>% hist(breaks = 500)
testdata$wspop %>% hist(breaks = 500)
testdata$nwtotal %>% hist(breaks = 500)
testdata$cgrove %>% hist(breaks = 500)
testdata$wminute %>% hist(breaks = 500)
testdata_ <- testdata %>% select(id, cat1 = csifem, cat2 = cisger, nd = wminute, ndc = cgrove, ndi = cspop, ndci = wage, p = widsgnfc, pi = wyviews) %>% mutate(pi = as.integer(pi * 0.0001))
testdata_ <- testdata %>% select(id, cat1 = cisfem, cat2 = cisger, nd = wminute, ndc = cgrove, ndi = cspop, ndci = wage, p = widsgnfc, pi = wyviews) %>% mutate(pi = as.integer(pi * 0.0001))
glimpse(testdata_)
testdata_ %>% mutate(pi = as.integer(pi))
testdata_ <- testdata_ %>% mutate(pi = as.integer(pi))
testdata_$p %>% hit
testdata_$p %>% hist
testdata_$p %>% hist(breaks = 50)
testdata_$pi %>% hist(breaks = 50)
testdata_ <- testdata %>% select(id, cat1 = cisfem, cat2 = cisger, nd = wminute, ndc = cgrove, ndi = cspop, ndci = wage, p = widsgnfc, pi = wyviews) %>% mutate(pi = as.integer(pi), p = as.integer(p))
testdata_$p %>% hist(breaks = 50)
testdata_$pi %>% hist(breaks = 50)
testdata_ <- testdata %>% select(id, cat1 = cisfem, cat2 = cisger, nd = wyviews, ndc = wminute, ndi = cspop, ndci = wage, p = widsgnfc, pi = cgrove) %>% mutate(pi = as.integer(pi), p = as.integer(p))
testdata_$pi %>% hist(breaks = 50)
testdata_$pi %>% min
testdata_ <- testdata %>% select(id, cat1 = cisfem, cat2 = cisger, nd = wyviews, ndc = wminute, ndi = cspop, ndci = wage, p = widsgnfc, pi = cgrove) %>% mutate(pi = as.integer(pi)+83, p = as.integer(p))
testdata_$pi %>% min
testdata_$pi %>% hist(breaks = 50)
testdata_$p %>% hist(breaks = 50)
saveRDS(testdata_, 'data-raw/testdata.rds')
testdata <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/data-raw/testdata.rds")
View(testdata)
colnames(testdata)
colnames(testdata) %>% paste
colnames(testdata) %>% toString()
colnames(testdata) %>% toString() %>% str_remove_all(',')
library(MplusAutomation)
mplusAvailable()
?mplusAvailable
?MplusAutomation::plotMixtures
setwd("N:/Markus-Radke_Dokumente/Master AKT/Masterarbeit/R/lca")
library(MplusAutomation)
readModels('all_model1censored_lca')
models <- readModels('all_model1censored_lca')
model <- models[[1]]
MplusAutomation::plotMixtures()
MplusAutomation::plotMixtures(model)
MplusAutomation::plotMixtures(models)
?MplusAutomation::plotMixtures()
MplusAutomation::plotMixtures(models, rawdata = T)
library(tidyverse)
library(devtools)
library(MplusAutomation)
?prepareMplusData()
readRDS('data-raw/testdata.rds')
testdata <- readRDS('data-raw/testdata.rds')
prepareMplusData(testdata)
prepareMplusData(testdata, inpfile = T)
prepareMplusData(testdata, writeData = F)
prepareMplusData(testdata, writeData = 'never')
syntax <- prepareMplusData(testdata, writeData = 'never')
syntax <- prepareMplusData(testdata)
syntax <- prepareMplusData(testdata)
createModels()
?createModels()
vignette("Vignette", package="MplusAutomation")
cignette("Vignette", package="MplusAutomation")
vignette("Vignette", package="MplusAutomation")
browseVignettes('MplusAutomation')
browseVignettes()
install.packages('MplusAutomation')
install.packages("MplusAutomation")
browseVignettes()
use_r('create_templates_in_subfolder.R')
library(devtools)
use_r('create_templates_in_subfolder.R')
rep(160, 4)
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates_in_subfolder.R", echo=TRUE)
use_test('create_templates.R')
library(devtools)
use_test('create_templates.R')
library(devtools)
testdata <- readRDS('data-raw/testdata.rds')
use_data(testdata,
internal = T,
overwrite = T)
read.table('data-raw/base_lca_model1_template.txt')
?read.table
base <- readLines('data-raw/base_lca_model1_template.txt')
base <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
View(base)
basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
basemodel_templates,
internal = T,
overwrite = T)
basemodel_templates
writeLines(text = basemodel_templates[[1]], )
writeLines(text = basemodel_templates[[1]],
con = 'data-raw/test/basemodel1.txt')
?writeLines()
open?
?open
?file
txtfile <- file('data-raw/test/basemodel1.txt')
writeLines(text = basemodel_templates[[1]],
con = txtfile)
close(txtfile)
writeLines(text = basemodel_templates[[1]], 'data-raw/test/basemodel1.txt')
writeLines(text = basemodel_templates[[1]], 'data-raw/test.txt')
readLines('data-raw/test.txt')
test <- readLines('data-raw/test.txt')
test == basemodel_templates[[]]
test == basemodel_templates[[1]]
all(test == basemodel_templates[[1]])
?expect_equal()
library(devtools)
?testthat::expect_equal()
expect_equal(basemodel_templates[[1]], test)
testthat::expect_equal(basemodel_templates[[1]], test)
erg <- testthat::expect_equal(basemodel_templates[[1]], test)
testthat::test_that('test',
testthat::expect_equal(basemodel_templates[[1]], test)
)
testthat::test_that('test', {
testthat::expect_equal(basemodel_templates[[1]], test)
}
)
test <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'),
)
test <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt')
)
testthat::test_that('test',{
testthat::expect_equal(basemodel_templates, test)
})
created_templated <- list(readLines('base_lca_model1_template.txt'),
readLines('base_lca_model2_template.txt'),
readLines('base_lca_model3_template.txt'),
readLines('base_lca_model4_template.txt'),
readLines('base_lca_model5_template.txt'),
readLines('base_lca_model6_template.txt'))
file.remove('base_lca_model1_template.txt')
file.remove('base_lca_model2_template.txt')
file.remove('base_lca_model3_template.txt')
file.remove('base_lca_model4_template.txt')
file.remove('base_lca_model5_template.txt')
file.remove('base_lca_model6_template.txt')
expect_equal(basemodel_templates, created_templates)
testthat::test_that('test',{
testthat::expect_equal(basemodel_templates, test)
})
library(devtools)
load_all()
test()
writeLines(text = c(''), 'base_lca_model1_template.txt')
load_all()
test()
load_all()
test()
basemodel_templates
basemodel_templates[[1]]
class(basemodel_templates[[]])
class(basemodel_templates[[1]])
seq(6)
'\test'
'/init'
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
res <- c(res, model_header)
}
res
}
create_headers('base_lca', 4)
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
print(model_header)
res <- c(res, model_header)
}
res
}
create_headers('base_lca', 4)
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
res <- c(res, list(model_header))
}
res
}
create_headers('base_lca', 4)
basemodel_templates
testdata <- readRDS('data-raw/testdata.rds')
basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
basemodel_templates,
internal = T,
overwrite = T)
basemodel_templates
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'),
'',
paste0('TITLE: ', analysis_name, '[[classes]] classes'),
paste0('FILE IS ', extended_name, '_[[classes]].dat;'))
res <- c(res, list(model_header))
}
res
}
create_headers('base_lca', 4)
# return(templates)
return(NULL) #
#' @param inflated
#' @param poisson
#' @param negbin
#' @param aux
#' @param LMRLRT
#'
#' @return List of character vectors with model templates. Also saves them as .txt files in current workind directory.
#' @export
#'
#' @examples
create_templates <- function(frame,
analysis_name,
nclasses = 4,
starts = rep(160, 4), # same for all types
cores = 16,
categoricals = c(),
censored = c(),
inflated = c(),
poisson = c(),
negbin = c(),
aux = c(),
LMRLRT = FALSE){
headers <- create_headers() # incl TITLE: DATA: lines => get a list of 6 strings for each type
# create_variable_specs() # same for all types
# create_model1() # model specs for each type
# create_model2() # model specs for each type
# create_model3() # model specs for each type
# create_model4() # model specs for each type
# create_model5() # model specs for each type
# create_model6() # model specs for each type
# create_analysis() # same for all types (also with starts, yes)
# create_plot_save() # get a list of 6 strings for each type
# make_templates() # list with 6 templates
save_templates(headers) # save all templates
# return(templates)
return(NULL) #
}
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'),
'',
paste0('TITLE: ', analysis_name, '[[classes]] classes'),
paste0('FILE IS ', extended_name, '_[[classes]].dat;'))
res <- c(res, list(model_header))
}
res
}
save_templates <- function(templates){
writeLines(templates[[1]], 'base_lca_model1_template.txt')
writeLines(templates[[2]], 'base_lca_model2_template.txt')
writeLines(templates[[3]], 'base_lca_model3_template.txt')
writeLines(templates[[4]], 'base_lca_model4_template.txt')
writeLines(templates[[5]], 'base_lca_model5_template.txt')
writeLines(templates[[6]], 'base_lca_model6_template.txt')
}
create_templates(testata, 'base_lca')
#' @param inflated
#' @param poisson
#' @param negbin
#' @param aux
#' @param LMRLRT
#'
#' @return List of character vectors with model templates. Also saves them as .txt files in current workind directory.
#' @export
#'
#' @examples
create_templates <- function(frame,
analysis_name,
nclasses = 4,
starts = rep(160, 4), # same for all types
cores = 16,
categoricals = c(),
censored = c(),
inflated = c(),
poisson = c(),
negbin = c(),
aux = c(),
LMRLRT = FALSE){
headers <- create_headers(analysis_name, nclasses) # incl TITLE: DATA: lines => get a list of 6 strings for each type
# create_variable_specs() # same for all types
# create_model1() # model specs for each type
# create_model2() # model specs for each type
# create_model3() # model specs for each type
# create_model4() # model specs for each type
# create_model5() # model specs for each type
# create_model6() # model specs for each type
# create_analysis() # same for all types (also with starts, yes)
# create_plot_save() # get a list of 6 strings for each type
# make_templates() # list with 6 templates
save_templates(headers) # save all templates
# return(templates)
return(NULL) #
}
create_templates(testata, 'base_lca')
load_all
load_all()
test()
