use_test('create_templates.R')
library(devtools)
testdata <- readRDS('data-raw/testdata.rds')
use_data(testdata,
internal = T,
overwrite = T)
read.table('data-raw/base_lca_model1_template.txt')
?read.table
base <- readLines('data-raw/base_lca_model1_template.txt')
base <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
View(base)
basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
basemodel_templates,
internal = T,
overwrite = T)
basemodel_templates
writeLines(text = basemodel_templates[[1]], )
writeLines(text = basemodel_templates[[1]],
con = 'data-raw/test/basemodel1.txt')
?writeLines()
open?
?open
?file
txtfile <- file('data-raw/test/basemodel1.txt')
writeLines(text = basemodel_templates[[1]],
con = txtfile)
close(txtfile)
writeLines(text = basemodel_templates[[1]], 'data-raw/test/basemodel1.txt')
writeLines(text = basemodel_templates[[1]], 'data-raw/test.txt')
readLines('data-raw/test.txt')
test <- readLines('data-raw/test.txt')
test == basemodel_templates[[]]
test == basemodel_templates[[1]]
all(test == basemodel_templates[[1]])
?expect_equal()
library(devtools)
?testthat::expect_equal()
expect_equal(basemodel_templates[[1]], test)
testthat::expect_equal(basemodel_templates[[1]], test)
erg <- testthat::expect_equal(basemodel_templates[[1]], test)
testthat::test_that('test',
testthat::expect_equal(basemodel_templates[[1]], test)
)
testthat::test_that('test', {
testthat::expect_equal(basemodel_templates[[1]], test)
}
)
test <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'),
)
test <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt')
)
testthat::test_that('test',{
testthat::expect_equal(basemodel_templates, test)
})
created_templated <- list(readLines('base_lca_model1_template.txt'),
readLines('base_lca_model2_template.txt'),
readLines('base_lca_model3_template.txt'),
readLines('base_lca_model4_template.txt'),
readLines('base_lca_model5_template.txt'),
readLines('base_lca_model6_template.txt'))
file.remove('base_lca_model1_template.txt')
file.remove('base_lca_model2_template.txt')
file.remove('base_lca_model3_template.txt')
file.remove('base_lca_model4_template.txt')
file.remove('base_lca_model5_template.txt')
file.remove('base_lca_model6_template.txt')
expect_equal(basemodel_templates, created_templates)
testthat::test_that('test',{
testthat::expect_equal(basemodel_templates, test)
})
library(devtools)
load_all()
test()
writeLines(text = c(''), 'base_lca_model1_template.txt')
load_all()
test()
load_all()
test()
basemodel_templates
basemodel_templates[[1]]
class(basemodel_templates[[]])
class(basemodel_templates[[1]])
seq(6)
'\test'
'/init'
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
res <- c(res, model_header)
}
res
}
create_headers('base_lca', 4)
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
print(model_header)
res <- c(res, model_header)
}
res
}
create_headers('base_lca', 4)
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'))
res <- c(res, list(model_header))
}
res
}
create_headers('base_lca', 4)
basemodel_templates
testdata <- readRDS('data-raw/testdata.rds')
basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
basemodel_templates,
internal = T,
overwrite = T)
basemodel_templates
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'),
'',
paste0('TITLE: ', analysis_name, '[[classes]] classes'),
paste0('FILE IS ', extended_name, '_[[classes]].dat;'))
res <- c(res, list(model_header))
}
res
}
create_headers('base_lca', 4)
# return(templates)
return(NULL) #
#' @param inflated
#' @param poisson
#' @param negbin
#' @param aux
#' @param LMRLRT
#'
#' @return List of character vectors with model templates. Also saves them as .txt files in current workind directory.
#' @export
#'
#' @examples
create_templates <- function(frame,
analysis_name,
nclasses = 4,
starts = rep(160, 4), # same for all types
cores = 16,
categoricals = c(),
censored = c(),
inflated = c(),
poisson = c(),
negbin = c(),
aux = c(),
LMRLRT = FALSE){
headers <- create_headers() # incl TITLE: DATA: lines => get a list of 6 strings for each type
# create_variable_specs() # same for all types
# create_model1() # model specs for each type
# create_model2() # model specs for each type
# create_model3() # model specs for each type
# create_model4() # model specs for each type
# create_model5() # model specs for each type
# create_model6() # model specs for each type
# create_analysis() # same for all types (also with starts, yes)
# create_plot_save() # get a list of 6 strings for each type
# make_templates() # list with 6 templates
save_templates(headers) # save all templates
# return(templates)
return(NULL) #
}
create_headers <- function(analysis_name, nclasses){
res <- list()
for(i in seq(6)){
extended_name <- paste0(analysis_name, '_model', i, '_lca')
model_header <- c('[[init]]',
'iterators = classes;',
paste0('classes = 1:', nclasses),
paste0('filename = \"[[classes]]_', extended_name,'.inp\";'),
paste0('outputDirectory = \"', extended_name, '\";'),
paste0('[[/init]]'),
'',
paste0('TITLE: ', analysis_name, '[[classes]] classes'),
paste0('FILE IS ', extended_name, '_[[classes]].dat;'))
res <- c(res, list(model_header))
}
res
}
save_templates <- function(templates){
writeLines(templates[[1]], 'base_lca_model1_template.txt')
writeLines(templates[[2]], 'base_lca_model2_template.txt')
writeLines(templates[[3]], 'base_lca_model3_template.txt')
writeLines(templates[[4]], 'base_lca_model4_template.txt')
writeLines(templates[[5]], 'base_lca_model5_template.txt')
writeLines(templates[[6]], 'base_lca_model6_template.txt')
}
create_templates(testata, 'base_lca')
#' @param inflated
#' @param poisson
#' @param negbin
#' @param aux
#' @param LMRLRT
#'
#' @return List of character vectors with model templates. Also saves them as .txt files in current workind directory.
#' @export
#'
#' @examples
create_templates <- function(frame,
analysis_name,
nclasses = 4,
starts = rep(160, 4), # same for all types
cores = 16,
categoricals = c(),
censored = c(),
inflated = c(),
poisson = c(),
negbin = c(),
aux = c(),
LMRLRT = FALSE){
headers <- create_headers(analysis_name, nclasses) # incl TITLE: DATA: lines => get a list of 6 strings for each type
# create_variable_specs() # same for all types
# create_model1() # model specs for each type
# create_model2() # model specs for each type
# create_model3() # model specs for each type
# create_model4() # model specs for each type
# create_model5() # model specs for each type
# create_model6() # model specs for each type
# create_analysis() # same for all types (also with starts, yes)
# create_plot_save() # get a list of 6 strings for each type
# make_templates() # list with 6 templates
save_templates(headers) # save all templates
# return(templates)
return(NULL) #
}
create_templates(testata, 'base_lca')
load_all
load_all()
test()
?new.env
library(devtools)
load_all()
test()
?env
load_all()
test()
load_all()
test()
use_package('rlang')
test()
test()
testdata
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
q
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
rlang::env_print(lcasettings)
?env
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R", echo=TRUE)
print_env(lcasettings)
rlang::env_print(lcasettings)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
parent.env(lcasettings) <- globalenv()
rlang::env_print(lcasettings)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
test()
load_all()
test()
test()
test()
rlang::env_print(lca)
lca$usevariables
lca$frame
test()
lca$frame
lca$naem
lca$names
lca$usevariables
lca$categoricals
rm(lca)
rm(lcasettings)
test()
lca
test()
test()
test()
rm(list = ls())
test()
test()
test()
test()
test()
test()
test()
paste(c('a', 'b', 'c'))
paste(c('a', 'b', 'c', sep = ' '))
paste(c('a', 'b', 'c'), collapse = ' ')
test()
# Create two lists with 6 character vectors each
list1 <- list(c("a", "b"), c("c", "d"), c("e", "f"), c("g", "h"), c("i", "j"), c("k", "l"))
list2 <- list(c("1", "2"), c("3", "4"), c("5", "6"), c("7", "8"), c("9", "10"), c("11", "12"))
# Initialize an empty list to store the combined vectors
combined_list <- vector("list", length = length(list1))
# Iterate over the lists and append the vectors
for (i in seq_along(list1)) {
combined_list[[i]] <- c(list1[[i]], list2[[i]])
}
# Print the combined list
print(combined_list)
test()
test()
test()
seq(6)
lca$headers
lca$headers[[]]
lca$headers[[1]]
lca$variable_specs[[1]]
test()
test()
test()
c()
test()
use_test('tests/testthat/test-create_templates.R')
use_test('tests/test-create_templates.R')
test()
test()
test()
library(devtools)
testdata <- readRDS('data-raw/testdata.rds')
basemodel_templates <- list(readLines('data-raw/base_lca_model1_template.txt'),
readLines('data-raw/base_lca_model2_template.txt'),
readLines('data-raw/base_lca_model3_template.txt'),
readLines('data-raw/base_lca_model4_template.txt'),
readLines('data-raw/base_lca_model5_template.txt'),
readLines('data-raw/base_lca_model6_template.txt'))
use_data(testdata,
basemodel_templates,
internal = T,
overwrite = T)
?matrix()
list(c(160, 160, 160, 160, 320),
c(160, 160, 160, 160, 320))
list(c(160, 160, 160, 160, 320),
c(160, 160, 160, 160, 320)) |> length()
stopifnot(2 = 2)
stopifnot(2 == 2)
stopifnot(2 == 3)
stopifnot(2 == 3, stop('You did not supply enough stars')))
stopifnot(2 == 3, stop('You did not supply enough stars'))
# Define variables for the conditions
x <- 5
y <- 10
# Check conditions using stopifnot with custom error messages
stopifnot(
x > 0,
y < 15,
stop("Custom error message for condition y < 15"),
x + y == 15,
stop("Custom error message for condition x + y == 15")
)
type(160L)
type(160)
class(160)
typeof(160)
1 == 1 & 2 == 2
1 == 1 && 2 == 2
rep(3,2)
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4
cores = 16,
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
load_all()
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
load_all()
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
load_all()
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
load_all()
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
create_templates(frame = testdata,
'base_lca',
id = 'id',
nclasses = 4,
starts = 4,
cores = 16,
categorical = c('cat1', 'cat2'),
aux = c('p', 'pi'))
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
lca$starts
load_all()
load_all
load_all()
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
lca$starts
rm(list=ls())
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
View(lca)
class(lca$starts)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
View(lca)
lca$usevariables <- colnames(lca$frame)[! colnames(lca$frame) %in% lca$aux]
class(lca$starts) == 'numeric' && length(lca$starts == 1)
debugSource("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/create_templates.R")
View(lca)
is.integer(160)
is.integer(160L)
test()
test()
test()
list(c('a', 'b'), c('c', 'd'))
test <- list(c('a', 'b'), c('c', 'd'))
test[1, 2]
test[1]
test[[]
test[[1]]
test[[1]][2]
test()
