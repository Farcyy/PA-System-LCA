portrait,
width = 9,
height = 16)
# ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
#                 portrait,
#                 width = 16,
#                 height = 9)
# landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
metric <- plot_metric_profiles(profiles)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
# design_portrait <- 'AA
#                     BC'
# portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
#                       heights = c(3,1),
#                       design = design_portrait)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
width = c(3,1),
design = design_landscape)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
# ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
#                 portrait,
#                 width = 9,
#                 height = 16)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
portrait,
width = 16,
height = 9)
# landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
metric <- plot_metric_profiles(profiles)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
design_portrait <- 'AA
BC'
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
portrait,
width = 16,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
metric <- plot_metric_profiles(profiles, ncol_plot = 3)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
portrait,
width = 16,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
metric <- plot_metric_profiles(profiles, ncol_plot = 3)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
portrait,
width = 16,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
metric <- plot_metric_profiles(profiles, ncol_plot = 3)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
landscape,
width = 16,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
metric <- plot_metric_profiles(profiles, ncol_plot = 3)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
landscape,
width = 20,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
metric <- plot_metric_profiles(profiles, ncol_plot = 3)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
landscape,
width = 22,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics <- function(results, type, class){
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
binary <- plot_binary_profiles(profiles)
kruskal <- plot_kruskal_profiles(model)
folder <- paste0(settings$folder_name, '/', settings$analysis_name, '_model', type,'_lca/plots')
if(! dir.exists(folder)){
dir.create(folder)
}
design_portrait <- 'AA
BC'
metric <- plot_metric_profiles(profiles, ncol_plot = 2)
portrait <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
heights = c(3,1),
design = design_portrait)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_portrait.png'),
portrait,
width = 9,
height = 16)
metric <- plot_metric_profiles(profiles, ncol_plot = 4)
design_landscape <- 'AB
AC'
landscape <- patchwork::wrap_plots(A = metric, B = binary, C = kruskal,
widths = c(3,1),
design = design_landscape)
ggplot2::ggsave(paste0(folder, '/diagnostic_model', type, '_', class, 'classes_landscape.png'),
landscape,
width = 22,
height = 9)
landscape
}
plot_modeltype_class_diagnostics(testresults, 3, 3)
plot_modeltype_class_diagnostics(testresults, 6, 3)
use_r('perform_lca')
test()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240912_21-09/test_lca_results.rds")
View(test_lca_results)
test()
test()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240912_21-21/test_lca_results.rds")
View(test_lca_results)
test()
test_active_file()
test_active_file()
test()
test()
plot_modeltype_class_diagnostics(test_lca_results,1,1)
load_all()
plot_modeltype_class_diagnostics(test_lca_results,1,1)
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[[toupper(item)]] %>% unique() %>% length() == 1
print(are_all_in_same_class)
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[[toupper(item)]] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
plot_modeltype_class_diagnostics(test_lca_results,1,1)
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/plot_profiles.R")
plot_modeltype_class_diagnostics(test_lca_results,1,1)
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/plot_profiles.R")
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/plot_profiles.R")
plot_modeltype_class_diagnostics(test_lca_results,1,1)
source("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/R/plot_profiles.R")
plot_modeltype_class_diagnostics(test_lca_results,1,1)
test()
model$savedata
model$savedata[['CLASS']]
model$savedata[['CLASS']] %>% unique()
model$savedata[['CLASS']] %>% unique() %>% length()
test()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240912_22-26/test_lca_results.rds")
View(test_lca_results)
test()
test()
test()
library(devtools)
test()
erg <- list()
erg[['test']] <- list(c(1,2,3))
erg[['test2']] <- list(c(4,5,6))
View(erg)
erg[[]]
erg[[1]]
testresults
tets <- testresults
View(tets)
tets$models[[1]]
tets$models[[1]][[1]]
test_active_file()
test_active_file()
test()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240916_18-20/test_lca_results.rds")
View(test_lca_results)
test()
testresults$summary
testresults$summary %>% view()
testresults$summary %>% View()
use_test('rerun_lca')
View(testresults$summary)
testresults$summary %>% dplyr::filter(boundary_values == F) %>% select(classes, modeltype)
testresults$summary %>% dplyr::filter(boundary_values == F) %>% dplyr::select(classes, modeltype)
testresults$summary %>% dplyr::filter(replicated == F) %>% dplyr::select(classes, modeltype)
testresults$settings$starts
test_active_file()
test_active_file()
testresults$settings
testresults$settings$starts
testresults$settings$starts[[4]][[3]]
test_active_file()
test_active_file()
library(devtools)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
testresults$settings$starts
testresults$settings$starts[as.integer(8)]
testresults$settings$starts[as.integer(6)]
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_test('rerun_lca')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_test('define_lca')
use_test('define_lca')
use_test('rerun_lca')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
works <- readRDS("N:/Markus-Radke_Dokumente/Master AKT/Masterarbeit/R/data/works.rds")
works %>% dplyr::glimpse()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
rm(works)
testresults$settings$starts
test_active_file()
expect_equal(update_starts_in_settings(testresults$settings), settings)
test_active_file()
settings <- testresults$settings
models_and_starts <- data.frame(classes = c(3,3,3,3,3,3),
modeltype = c(1,2,3,4,5,6),
starts = c(40,40,40,40,40,40))
settings$starts <- list(c(20, 20, 40),
c(20, 20, 40),
c(20, 20, 40),
c(20, 20, 40),
c(20, 20, 40),
c(20, 20, 40))
erg <- update_starts_in_settings(testresults$settings, models_and_starts)
View(erg)
View(settings)
erg$analysis_name
erg$analysis_name <- 'dfs'
erg$analysis_name
settings$analysis_name
settings <- as.environment(as.list(testresults$settings, all.names=TRUE))
settings <- as.environment(as.list(testresults$settings, all.names=TRUE))
View(settings)
test_active_file()
View(erg)
View(settings)
use_r('define_lca')
test_active_file()
test_active_file()
erg <- list()
erg$test <- 'test'
View(erg)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
ls)()
ls()
rm(list = ls())
test = list(a = 'test')
ls(test)
test$b = 1
ls(test)
rm(test)
test_active_files()
test_active_file()
test <- list()
test$starts <- 160
length(test$starts)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_test('create_templates')
use_r('create_templates')
test_active_file()
use_test('rerun_lca')
test()
rm(list = ls())
test_active_file()
# generate testresults
testsettings <- define_lca(testdata, 'test','id', nclasses = 3, starts = 20L, cores = 16,
use = c('var1', 'var3', 'var4', 'var5', 'var6', 'var7', 'var8'),
categorical = c('var1'),
censored_above = c('var6'),
censored_below = c('var3', 'var4'),
poisson = 'var8',
negbin = 'var7',
inflated = c('var7', 'var4'))
testresults <- perform_lca(settings)
# generate testresults
testsettings <- define_lca(testdata, 'test','id', nclasses = 3, starts = 20L, cores = 16,
use = c('var1', 'var3', 'var4', 'var5', 'var6', 'var7', 'var8'),
categorical = c('var1'),
censored_above = c('var6'),
censored_below = c('var3', 'var4'),
poisson = 'var8',
negbin = 'var7',
inflated = c('var7', 'var4'))
testresults <- perform_lca(testsettings)
saveRDS(testresults, 'data-raw/testresults.rds')
use_data(testdata,
internal = F,
overwrite = T)
use_data(testresults,
internal = T,
overwrite = T)
test_active_file()
View(testresults)
settings <- testresults$settings
class(settings)
rm(list=ls())
test_active_file()
use_r('rerun_lca')
models_and_starts <- data.frame(classes = c(3,3,3,3,3,3),
modeltype = c(1,2,3,4,5,6),
starts = c(40,40,40,40,40,40))
models_and_starts[[i]]
models_and_starts[[1]]
