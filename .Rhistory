test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_r('rerun_lca')
test_active_file()
test_active_file()
test_active_file()
check()
test()
use_package('rfdh5')
use_package('rhdf5')
check()
document()
load_all()
check()
use_r('create_templates')
library(devtools)
install_github('markusradke/easylca')
MplusAutomation::detectMplus()
?MplusAutomation::detectMplus()
if(! MplusAutomation::detectMplus())
{stop('No MPlus detectet.')}
invisible(MplusAutomation::detectMplus())
?invisible
use_test('define_lca')
colnames(testdata) <- ')
})
data.frame(1df = 'a')
data.frame(+df = 'a')
data.frame(df = 'a')
test_active_file()
test_active_file()
testdata <- readRDS('data-raw/testdata.rds')
testresults <- readRDS('data-raw/testresults.rds')
use_data(testdata,
internal = F,
overwrite = T)
use_data(testresults,
internal = T,
overwrite = T)
test_active_file()
library(devtools)
test_active_file()
use_r('define_lca')
test_active_file()
test()
library(devtools)
document()
document()
document()
load_all()
?easylca
vignette(easylca)
packageDescription('easylca')
help(package ='easylca')
?easylca
??easylca
document()
packageDescription('easylca')
document()
packageDescription('easylca')
document()
packageDescription('easylca')
document()
packageDescription('easylca')
document()
packageDescription('easylca')
document()
packageDescription('easylca')
library(devtools)
use_r('define_lca')
document()
use_r('data_diagnosis')
use_test('data_diagnosis')
hist(testdat)
hist(testdata$var1)
hist(testdata$var6)
hist(testdata$var6, breaks = 1000)
hist(testdata$var6, breaks = 100)
hist(testdata$var6, breaks = 100) %>% class
test <- hist(testdata$var6, breaks = 100)
test
print(test)
test
print(test)
plot(test)
head(testdata)
hist(testdata$var1, breaks = 2)
hist(testdata$var1, breaks = 2, probability = T)
?hist
rep('histogramm', 8)
list(rep(Ã„a))
list(rep'a')
list(rep('a'))
list(rep('a', 4))
?rep()
rep(list('histogramm'), 8)
list('ab', 12)
list('ab', 12) %>% classes
list('ab', 12) %>% class
list('ab', 12) %>% purrr::map(class)
data.frame(a=2)
data.frame(a=2) %>% class
classes <- c(rep(list('histogramm'), 8), list('data.frame'))
classes
rm(list=ls())
sample(1000, 100)
testdata %>%
dplyr::select(id, var1) %>%
dplyr::mutate(var1 = ifelse(dplyr::row_number() %in% idcs))
idcs <- sample(1000, 100)
testdata %>%
dplyr::select(id, var1) %>%
dplyr::mutate(var1 = ifelse(dplyr::row_number() %in% idcs))
testdata %>%
dplyr::select(id, var1) %>%
dplyr::mutate(var1 = ifelse(dplyr::row_number() %in% idcs, NA, var1))
test_active_file()
use_r('data_diagnosis')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
tesdata
testdata
dplyr::glipse(testdaa)
dplyr::glipse(testdata)
dplyr::glimpse(testdata)
dplyr::glimpse(testdata)
test_active_file()
test_active_file()
test_active_file()
data <- testdata
res <- list()
variables <- colnames(data)[colnames(data) != id]
id = 'id'
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(var in variables){
res <- c(res, hist(data[[var]]))
}
res <- c(res, list(hist(data[[var]])))
res <- list(res, hist(data[[var]]))
res <- list(res, hist(data[[var]]))
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(var in variables){
res <- list(res, hist(data[[var]]))
}
use_r('perform_lca')
use_r('diagnose_data')
use_r('diagnose_data')
test_active_file()
test_active_file()
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(i in seq(length(variables))){
res[[i]] <- hist(data[[variables[i]]])
}
View(res)
res[[length(variables) + 1]] <- data.frame(var  = 'a', missings_relfreq = 0)
View(res)
wrong_type <- testdata %>% dplyr::mutate(var1 = as.character(var1))
expect_error(data_diagnosis(wrong_type, 'id'),
'Please provide only numeric data columns. Make sure categorical variables are coded as integers > 0.')
rm(list=ls())
test_active_file()
data <- testdata
res <- list()
variables <- colnames(data)[colnames(data) != id]
id -< 'id'
id <- 'id'
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(i in seq(length(variables))){
res[[i]] <- hist(data[[variables[i]]])
}
res[[length(variables) + 1]] <- data.frame(var  = 'a', missings_relfreq = 0)
res[[9]]
res[[9]] %>% colnames
res <- data_diagnosis(testdata, 'id')
View(res)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
?hist
?hist
dplyr::tibble(test = 1)
dplyr::tibble(test = 1) %>% class
test_active_file()
testdata %>% purrr::map(class)
testdata %>% purrr::map(class) %>% unlist
testdata %>% purrr::map(class) %>% unlist %in% ('integer', 'numeric')
testdata %>% purrr::map(class) %>% unlist() %in% ('integer', 'numeric')
testdata %>% purrr::map(class) %>% unlist() %in% c('integer', 'numeric')
all(testdata %>% purrr::map(class) %>% unlist() %in% c('integer', 'numeric'))
test_active_file()
test_active_file()
wrong_type <- testdata %>% dplyr::mutate(var1 = as.character(var1))
View(wrong_type)
View(wrong_type)
test_active_file()
test_active_file()
test_active_file()
?map(, ...)
?map(, ...)
test_active_file()
test_active_file()
use_test('diganose_data')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
diagnose_data(data, 'id')
rm(list=ls)()
rm(list=ls())
test_active_file()
load_all()
diagnose_data(testdata, 'id')
load_all()
diagnose_data(testdata, 'id')
?hist()
load_all()
diagnose_data(testdata, 'id')
load_all()
diagnose_data(testdata, 'id')
test_active_file()
data <- testdata
id <- 'id'
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(i in seq(length(variables))){
var <- variables[i]
vector <- data[var]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks)
}
i <- 1
var <- variables[i]
vector <- data[var]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks)
rm(list=ls())
test_active_file()
test_active_file()
?hist
test_active_file()
test_active_file()
data <- testdata
id <- 'id'
i <- i
i <- 1
var <- variables[i]
vector <- data[[var]]
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(i in seq(length(variables))){
var <- variables[i]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks)
if(n_unique_values < 10){
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=1)
axis(1, at=xticks, labels=xticks)
}
}
var <- variables[i]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
i <- 1
var <- variables[i]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks)
if(n_unique_values < 10){
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=1)
axis(1, at=xticks, labels=xticks)
}
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks)
if(n_unique_values < 10){
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=1)
axis(1, at=xticks, labels=xticks)
}
var <- variables[i]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks,
xaxt='n')
if(n_unique_values < 10){
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=1)
axis(1, at=xticks, labels=xticks)
}
res <- list()
variables <- colnames(data)[colnames(data) != id]
for(i in seq(length(variables))){
var <- variables[i]
vector <- data[[var]]
n_unique_values <- unique(vector) %>% length()
nbreaks <- ifelse(n_unique_values < 100, n_unique_values, 100)
res[[i]] <- hist(vector,
main = paste('Histogram of', var),
xlab = var,
breaks = nbreaks,
xaxt='n')
if(n_unique_values < 10){
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=1)
}
else{
xticks <- seq(min(vector, na.rm = T), max(vector, na.rm = T), by=(max(vector, na.rm = T)-min(vector.na.rm = T) / 10))
}
axis(1, at=xticks, labels=xticks)
}
rm(list=ls())
test_active_file()
test_active_file()
test_active_file()
test_active_file()
?invisible()
?invisible()
test_active_file()
test_active_file()
diagnose_datat(testdata, 'id')
diagnose_data(testdata, 'id')
invisible(diagnose_data(testdata, 'id'))
suppressMessages(invisible(diagnose_data(testdata, 'id'))
)
suppressMessages(invisible(diagnose_data(testdata, 'id')))
test_active_file()
test_active_file()
document()
?diagnose_data
use_test('perform_lca')
?expect_message
test_active_file()
?perform_lca
test_active_file()
test_active_file()
test_active_file()
test_active_file()
testresults$settings
results <- testresults
settings <- results$settings
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
type <- 3
model <- 2
model <- results$models[[type]][[class]]
class <- 2
model <- results$models[[type]][[class]]
profiles <- extract_profile_for_plotting(model, settings)
View(profiles)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
profiles$param
profiles$param %>% unique()
profiles$param %>% unique() == c('Means', 'Probabilities')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240919_19-45/test_lca_results.rds")
View(test_lca_results)
test_lca_results$plots$mode1[[1]]
test <- testresults
View(test)
test_lca_results$plots$mode1[[1]] %>% plot
test$plots$mode1[[1]] %>% plot
test$o
test$plots$model1[[1]]
test$plots$model1[[2]]
test$plots$model1[[2]][[1]]
test_lca_results$plots$summary
test_lca_results$plots$model1[[1]]
test_lca_results$plots$model1[[2]]
test_active_file()
?
patchwork::wrap_plots()
start <- Sys.time()
end <- Sys.time()
elapsed <- start <- end
end <- Sys.time()
elapsed <- start - end
elapsed <- end - start
start <- Sys.time()
end <- Sys.time()
start_time <- Sys.time()
end_time <- list()
elapse_time <- start_time - end_time
difftime(start_time, end_time)
?difftime
class(start_time)
?Sys.time
start %>% as.difftime()
start %>% as.datetime()
difftime(start, end)
diff <- difftime(start, end)
diff <- difftime(end, start)
diff
use_r('rerun_lca')
document()
rm(list=ls())
start <- Sys.time()
end <- Sys.time()
end - start
use_r('utils_lca')
load_all()
print_elapsed_time(start, end)
load_all()
print_elapsed_time(start, end)
print_elapsed_time(start, end)
load_all()
print_elapsed_time(start, end)
test_active_file()
test_active_file()
test_active_file()
age
test_active_file()
?expect_silent()
test_active_file()
rm(list=ls())
test_lca_results <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/tests/testthat/test_20240919_20-15/test_lca_results.rds")
View(test_lca_results)
test_lca_results$su#
settings <- define_lca(testdata, 'mradke', 'id', nclasses = 3, categorical = c('var1', 'var2'), use=c('var1', 'var2','var3'))
perform_lca(settings, modeltypes = c(1,2))
load_all()
perform_lca(settings, modeltypes = c(1,2))
test()
use_test('diagnose_data')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
rm(list=ls())
use_r('diagnose_data')
test_active_file()
test_active_file()
test_active_file()
sink()
a
'a'
2
library(devtools)
test_active_file()
settings <- define_lca(testdata, 'test', 'id', nclasses = 2, starts = 40,
use = c('var1', 'var2'))
perform_lca(settings, modeltypes = 1)
test_model1 <- readRDS("N:/Markus-Radke_Dokumente/Tutorium_TU/easylca/test_20240919_20-55/test_model1_lca/test_model1.rds")
View(test_model1)
use_r('create_modeloverview')
test_active_file()
rm(list = ls())
test()
library(devtools)
use_r('create_modeloverview')
test <- data.frame(test = 1)
test$Entropy <- NA
test
rm(test)
test_active_file()
?suppressWarnings()
suppressWarnings(3 + 4)
test()
test_active_file()
